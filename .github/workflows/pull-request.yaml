name: Pull Request

# Trigger the workflow on pull request to either master or develop branch
on:
  pull_request:
    branches:
      - master
      - develop

jobs:
  linting:
    name: Linting
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    steps:
      - name: Clone Repo
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Get Full Python Version
        id: full-python-version
        shell: bash
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Set up Poetry
        uses: Gr1N/setup-poetry@v2

      - name: Set up Cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        run: |
          poetry config http-basic.flow-pypi flow-pypi ${{ secrets.FLOW_PYPI_PASSWORD }}
          poetry run pip install pip --upgrade
          poetry install -vvv
      - name: Run Linting
        run: |
          poetry run pre-commit run --all
          poetry run flake8 --format wemake
          poetry run mypy .
  testing:
    name: Testing
    needs: linting
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    strategy:
      fail-fast: false
      matrix:
        python: [3.6, 3.7, 3.8]

    steps:
      - name: Clone Repo
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Get Full Python Version
        id: full-python-version
        shell: bash
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Set up Poetry
        uses: Gr1N/setup-poetry@v2

      - name: Set up Cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        run: |
          poetry config http-basic.flow-pypi flow-pypi ${{ secrets.FLOW_PYPI_PASSWORD }}
          poetry run python -m pip install pip --upgrade
          poetry install -vvv
      - name: Run Tests
        run: |
          poetry run pytest
